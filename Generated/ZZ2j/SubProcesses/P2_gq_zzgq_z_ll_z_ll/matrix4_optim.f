      SUBROUTINE SMATRIX4(P,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.5.3, 2023-12-23
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared summed/avg over colors
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: g d > z z g d WEIGHTED<=6 @2
C     *   Decay: z > e+ e- WEIGHTED<=2
C     *   Decay: z > mu+ mu- WEIGHTED<=2
C     Process: g s > z z g s WEIGHTED<=6 @2
C     *   Decay: z > e+ e- WEIGHTED<=2
C     *   Decay: z > mu+ mu- WEIGHTED<=2
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      Include 'genps.inc'
      Include 'maxconfigs.inc'
      Include 'nexternal.inc'
      Include 'maxamps.inc'
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=32)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=30) 
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=30) 
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
C     
C     LOCAL VARIABLES 
C     
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER NHEL(NEXTERNAL,NCOMB)
      REAL*8 T
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 XTOT
      INTEGER  J, JJ

      double precision get_channel_cut
      external get_channel_cut

C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2


C     
C     INFORMATION TO WRITE THE HELICITY IN THE EVENT --not memory
C      efficient--
C     
      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER NB_SPIN_STATE_in(2)
      common /nb_hel_state/ nb_spin_state_in

      REAL*8 POL(2)

      COMMON/TO_POLARIZATION/ POL
      double precision tmin_for_channel
      integer sde_strat    !  1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      
      DATA (NHEL(I,1),I=1,8) /-1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,2),I=1,8) /-1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,3),I=1,8) /-1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,4),I=1,8) /-1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,5),I=1,8) /-1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,6),I=1,8) /-1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,7),I=1,8) /-1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,8),I=1,8) /-1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,9),I=1,8) /-1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,10),I=1,8) /-1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,11),I=1,8) /-1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,12),I=1,8) /-1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,13),I=1,8) /-1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,14),I=1,8) /-1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,15),I=1,8) /-1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,16),I=1,8) /-1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,17),I=1,8) / 1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,18),I=1,8) / 1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,19),I=1,8) / 1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,20),I=1,8) / 1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,21),I=1,8) / 1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,22),I=1,8) / 1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,23),I=1,8) / 1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,24),I=1,8) / 1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,25),I=1,8) / 1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,26),I=1,8) / 1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,27),I=1,8) / 1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,28),I=1,8) / 1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,29),I=1,8) / 1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,30),I=1,8) / 1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,31),I=1,8) / 1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,32),I=1,8) / 1,-1,-1, 1,-1, 1, 1,-1/
      DATA IDEN/96/

C     ----------
C     BEGIN CODE
C     ----------

      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (multi_channel) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=2
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
C     Kiran please check if you need this:    
      DO I=1,NCOMB
        TS(I)=0d0
      ENDDO

      call MATRIX4(P ,JC(1), TS)
      DO I=1,NCOMB     
        T=TS(I)  
        DO JJ=1,nincoming
          IF(POL(JJ).NE.1d0.AND.NHEL(JJ,I).EQ.INT(SIGN(1d0,POL(JJ))))
     $      THEN
            T=T*ABS(POL(JJ))*NB_SPIN_STATE_IN(JJ)/2d0    !  NB_SPIN_STATE(JJ)/2d0 is added for polarised beam
          ELSE IF(POL(JJ).NE.1d0)THEN
            T=T*(2d0-ABS(POL(JJ)))*NB_SPIN_STATE_IN(JJ)/2d0
          ENDIF
        ENDDO
        ANS=ANS+DABS(T)
        TS(I)=T
      ENDDO

      IF (ANS.ne.0d0) THEN
        CALL RANMAR(R)
        SUMHEL=0d0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(R.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE   
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,LMAXCONFIGS
          J = CONFSUB(4, I)
          if (J.ne.0)then
            if (sde_strat.eq.1)then
              AMP2(J) = AMP2(J) * GET_CHANNEL_CUT(P, I)
            else
              AMP2(J) = GET_CHANNEL_CUT(P, I)
            endif
            XTOT=XTOT+AMP2(J)

          endif
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(SUBDIAG(4))/XTOT
        ELSE IF(ANS.ne.0d0) THEN
          write(*,*) 'Problem in the multi-channeling. All amp2 are'
     $     //' zero but not the total matrix-element'
          stop 1
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      END


      Subroutine  MATRIX4(P,IC, TS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.5.3, 2023-12-23
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: g d > z z g d WEIGHTED<=6 @2
C     *   Decay: z > e+ e- WEIGHTED<=2
C     *   Decay: z > mu+ mu- WEIGHTED<=2
C     Process: g s > z z g s WEIGHTED<=6 @2
C     *   Decay: z > e+ e- WEIGHTED<=2
C     *   Decay: z > mu+ mu- WEIGHTED<=2
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=30) 
      include 'genps.inc'
      include 'nexternal.inc'
      include 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=168, NCOLOR=2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=32)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      REAL*8 TS(NCOMB)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N,K
      COMPLEX*16 ZTEMP,TMP_JAMP(5)
      COMPLEX*16 TMP(6)
      REAL*8 CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NCOMB,NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0d0, 0d0), (1d0, 0d0)/

      double precision fk_ZERO 
      double precision fk_mdl_WZ 
      save fk_ZERO 
      save fk_mdl_WZ 

      logical first
      data first /.true./
      save first
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX4

C     
C     GLOBAL VARIABLES
C     
      Double Precision amp2(maxamps), jamp2(0:maxflow)
      common/to_amps/  amp2,       jamp2
      include 'coupl.inc'

      double precision tmin_for_channel
      integer sde_strat    !  1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      double precision small_width_treatment
      common/narrow_width/small_width_treatment
C     
C     COLOR DATA
C     
      DATA (CF(i,  1),i=  1,  2) /5.333333333333333d+00,
     $ -6.666666666666666d-01/
C     1 T(1,7,8,2)
      DATA (CF(i,  2),i=  1,  2) /-6.666666666666666d-01
     $ ,5.333333333333333d+00/
C     1 T(7,1,8,2)
C     ----------
C     BEGIN CODE
C     ----------
      if (first) then
        first=.false.
        IF(ZERO.ne.0d0) fk_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *small_width_treatment)), ZERO)
        IF(mdl_WZ.ne.0d0) fk_mdl_WZ = SIGN(MAX(ABS(mdl_WZ), ABS(mdl_MZ
     $   *small_width_treatment)), mdl_WZ)
      endif
      AMP(:,:) = (0d0,0d0)
            CALL VXXXXX(P(0,1),ZERO,+1,-1*IC(1),W(1,1))  !  count 30
      CALL VXXXXX(P(0,1),ZERO,-1,-1*IC(1),W(1,2))  !  count 30
      CALL IXXXXX(P(0,2),ZERO,+1,+1*IC(2),W(1,3))  !  count 12
      CALL IXXXXX(P(0,2),ZERO,-1,+1*IC(2),W(1,4))  !  count 12
      CALL IXXXXX(P(0,3),ZERO,+1,-1*IC(3),W(1,5))  !  count 1
      CALL IXXXXX(P(0,3),ZERO,-1,-1*IC(3),W(1,6))  !  count 1
      CALL OXXXXX(P(0,4),ZERO,+1,+1*IC(4),W(1,7))  !  count 1
      CALL OXXXXX(P(0,4),ZERO,-1,+1*IC(4),W(1,8))  !  count 1
      CALL FFV2_4_3(W(1,5),W(1,8),GC_50,GC_59,MDL_MZ,FK_MDL_WZ,W(1,9))  !  count 172
      CALL FFV2_4_3(W(1,6),W(1,7),GC_50,GC_59,MDL_MZ,FK_MDL_WZ,W(1,10))  !  count 172
      CALL IXXXXX(P(0,5),ZERO,+1,-1*IC(5),W(1,11))  !  count 1
      CALL IXXXXX(P(0,5),ZERO,-1,-1*IC(5),W(1,12))  !  count 1
      CALL OXXXXX(P(0,6),ZERO,+1,+1*IC(6),W(1,13))  !  count 1
      CALL OXXXXX(P(0,6),ZERO,-1,+1*IC(6),W(1,14))  !  count 1
      CALL FFV2_4_3(W(1,11),W(1,14),GC_50,GC_59,MDL_MZ,FK_MDL_WZ,W(1,15)
     $)  !  count 172
      CALL FFV2_4_3(W(1,12),W(1,13),GC_50,GC_59,MDL_MZ,FK_MDL_WZ,W(1,16)
     $)  !  count 172
      CALL VXXXXX(P(0,7),ZERO,+1,+1*IC(7),W(1,17))  !  count 142
      CALL VXXXXX(P(0,7),ZERO,-1,+1*IC(7),W(1,18))  !  count 142
      CALL OXXXXX(P(0,8),ZERO,+1,+1*IC(8),W(1,19))  !  count 12
      CALL OXXXXX(P(0,8),ZERO,-1,+1*IC(8),W(1,20))  !  count 12
      CALL VVV1P0_1(W(1,1),W(1,17),GC_10,ZERO,FK_ZERO,W(1,21))  !  count 20
      CALL VVV1P0_1(W(1,1),W(1,18),GC_10,ZERO,FK_ZERO,W(1,22))  !  count 20
      CALL VVV1P0_1(W(1,2),W(1,17),GC_10,ZERO,FK_ZERO,W(1,23))  !  count 20
      CALL VVV1P0_1(W(1,2),W(1,18),GC_10,ZERO,FK_ZERO,W(1,24))  !  count 20
      CALL FFV2_3_1(W(1,19),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,25))  !  count 50
      CALL FFV2_3_1(W(1,19),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,26))  !  count 50
      CALL FFV2_3_1(W(1,20),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,27))  !  count 50
      CALL FFV2_3_1(W(1,20),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,28))  !  count 50
      CALL FFV1_2(W(1,3),W(1,21),GC_11,ZERO,FK_ZERO,W(1,29))  !  count 8
      CALL FFV1_2(W(1,3),W(1,22),GC_11,ZERO,FK_ZERO,W(1,30))  !  count 8
      CALL FFV1_2(W(1,3),W(1,23),GC_11,ZERO,FK_ZERO,W(1,31))  !  count 8
      CALL FFV1_2(W(1,3),W(1,24),GC_11,ZERO,FK_ZERO,W(1,32))  !  count 8
      CALL FFV1_2(W(1,4),W(1,21),GC_11,ZERO,FK_ZERO,W(1,33))  !  count 8
      CALL FFV1_2(W(1,4),W(1,22),GC_11,ZERO,FK_ZERO,W(1,34))  !  count 8
      CALL FFV1_2(W(1,4),W(1,23),GC_11,ZERO,FK_ZERO,W(1,35))  !  count 8
      CALL FFV1_2(W(1,4),W(1,24),GC_11,ZERO,FK_ZERO,W(1,36))  !  count 8
      CALL FFV2_3P1N_1(W(1,25), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,1))
      CALL FFV2_3P1N_1(W(1,25), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,1))
      CALL FFV2_3P1N_1(W(1,26), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,1))
      CALL FFV2_3P1N_1(W(1,26), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,1))
      CALL FFV2_3P1N_1(W(1,27), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,1))
      CALL FFV2_3P1N_1(W(1,27), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,1))
      CALL FFV2_3P1N_1(W(1,28), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,1))
      CALL FFV2_3P1N_1(W(1,28), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,1))  !  count 1
      CALL FFV2_3_2(W(1,3),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,37))  !  count 50
      CALL FFV2_3_2(W(1,3),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,38))  !  count 50
      CALL FFV2_3_2(W(1,4),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,39))  !  count 50
      CALL FFV2_3_2(W(1,4),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,40))  !  count 50
      CALL FFV1P1N_1(W(1,25), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/18,20/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,25), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/17,19/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,25), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/2,4/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,25), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/1,3/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,26), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/22,24/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,26), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/21,23/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,26), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/6,8/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,26), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/5,7/), 
     & (/37,38/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,27), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/26,28/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,27), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/25,27/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,27), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/10,12/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,27), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/9,11/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,28), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/30,32/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,28), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/29,31/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,28), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/14,16/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))
      CALL FFV1P1N_1(W(1,28), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/13,15/), 
     & (/39,40/),
     & TMP, W, AMP(1,2))  !  count 1
      CALL FFV2_3_2(W(1,3),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,41))  !  count 50
      CALL FFV2_3_2(W(1,3),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,42))  !  count 50
      CALL FFV2_3_2(W(1,4),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,43))  !  count 50
      CALL FFV2_3_2(W(1,4),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,44))  !  count 50
      CALL FFV1_1(W(1,19),W(1,21),GC_11,ZERO,FK_ZERO,W(1,45))  !  count 8
      CALL FFV1_1(W(1,19),W(1,22),GC_11,ZERO,FK_ZERO,W(1,46))  !  count 8
      CALL FFV1_1(W(1,19),W(1,23),GC_11,ZERO,FK_ZERO,W(1,47))  !  count 8
      CALL FFV1_1(W(1,19),W(1,24),GC_11,ZERO,FK_ZERO,W(1,48))  !  count 8
      CALL FFV1_1(W(1,20),W(1,21),GC_11,ZERO,FK_ZERO,W(1,49))  !  count 8
      CALL FFV1_1(W(1,20),W(1,22),GC_11,ZERO,FK_ZERO,W(1,50))  !  count 8
      CALL FFV1_1(W(1,20),W(1,23),GC_11,ZERO,FK_ZERO,W(1,51))  !  count 8
      CALL FFV1_1(W(1,20),W(1,24),GC_11,ZERO,FK_ZERO,W(1,52))  !  count 8
      CALL FFV2_3P1N_2(W(1,41), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,3))
      CALL FFV2_3P1N_2(W(1,41), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,3))
      CALL FFV2_3P1N_2(W(1,42), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,3))
      CALL FFV2_3P1N_2(W(1,42), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,3))
      CALL FFV2_3P1N_2(W(1,43), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,3))
      CALL FFV2_3P1N_2(W(1,43), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,3))
      CALL FFV2_3P1N_2(W(1,44), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,3))
      CALL FFV2_3P1N_2(W(1,44), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,3))  !  count 1
      CALL FFV2_3_1(W(1,19),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,53))  !  count 50
      CALL FFV2_3_1(W(1,19),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,54))  !  count 50
      CALL FFV2_3_1(W(1,20),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,55))  !  count 50
      CALL FFV2_3_1(W(1,20),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,56))  !  count 50
      CALL FFV1P1N_1(W(1,53), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/18,22/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,53), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/17,21/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,53), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/2,6/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,53), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/1,5/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,54), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/20,24/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,54), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/19,23/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,54), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/4,8/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,54), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/3,7/), 
     & (/41,42/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,55), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/26,30/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,55), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/25,29/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,55), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/10,14/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,55), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/9,13/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,56), W(1,21), GC_11, TMP(1))
      call CombineAmp(2,
     & (/28,32/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,56), W(1,22), GC_11, TMP(1))
      call CombineAmp(2,
     & (/27,31/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,56), W(1,23), GC_11, TMP(1))
      call CombineAmp(2,
     & (/12,16/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))
      CALL FFV1P1N_1(W(1,56), W(1,24), GC_11, TMP(1))
      call CombineAmp(2,
     & (/11,15/), 
     & (/43,44/),
     & TMP, W, AMP(1,4))  !  count 1
      CALL FFV2_3P1N_1(W(1,53), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,5))
      CALL FFV2_3P1N_1(W(1,53), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,5))
      CALL FFV2_3P1N_1(W(1,54), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,5))
      CALL FFV2_3P1N_1(W(1,54), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/29,30,31,32/),
     & TMP, W, AMP(1,5))
      CALL FFV2_3P1N_1(W(1,55), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,5))
      CALL FFV2_3P1N_1(W(1,55), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,5))
      CALL FFV2_3P1N_1(W(1,56), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,5))
      CALL FFV2_3P1N_1(W(1,56), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/33,34,35,36/),
     & TMP, W, AMP(1,5))  !  count 1
      CALL FFV2_3P1N_2(W(1,37), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,6))
      CALL FFV2_3P1N_2(W(1,37), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,6))
      CALL FFV2_3P1N_2(W(1,38), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,6))
      CALL FFV2_3P1N_2(W(1,38), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/45,46,47,48/),
     & TMP, W, AMP(1,6))
      CALL FFV2_3P1N_2(W(1,39), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,6))
      CALL FFV2_3P1N_2(W(1,39), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,6))
      CALL FFV2_3P1N_2(W(1,40), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,6))
      CALL FFV2_3P1N_2(W(1,40), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/49,50,51,52/),
     & TMP, W, AMP(1,6))  !  count 1
      CALL FFV1_1(W(1,19),W(1,1),GC_11,ZERO,FK_ZERO,W(1,57))  !  count 6
      CALL FFV1_1(W(1,19),W(1,2),GC_11,ZERO,FK_ZERO,W(1,58))  !  count 6
      CALL FFV1_1(W(1,20),W(1,1),GC_11,ZERO,FK_ZERO,W(1,59))  !  count 6
      CALL FFV1_1(W(1,20),W(1,2),GC_11,ZERO,FK_ZERO,W(1,60))  !  count 6
      CALL FFV1_2(W(1,3),W(1,17),GC_11,ZERO,FK_ZERO,W(1,61))  !  count 34
      CALL FFV1_2(W(1,3),W(1,18),GC_11,ZERO,FK_ZERO,W(1,62))  !  count 34
      CALL FFV1_2(W(1,4),W(1,17),GC_11,ZERO,FK_ZERO,W(1,63))  !  count 34
      CALL FFV1_2(W(1,4),W(1,18),GC_11,ZERO,FK_ZERO,W(1,64))  !  count 34
      CALL FFV2_3_1(W(1,57),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,65))  !  count 8
      CALL FFV2_3_1(W(1,57),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,66))  !  count 8
      CALL FFV2_3_1(W(1,58),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,67))  !  count 8
      CALL FFV2_3_1(W(1,58),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,68))  !  count 8
      CALL FFV2_3_1(W(1,59),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,69))  !  count 8
      CALL FFV2_3_1(W(1,59),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,70))  !  count 8
      CALL FFV2_3_1(W(1,60),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,71))  !  count 8
      CALL FFV2_3_1(W(1,60),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,72))  !  count 8
      CALL FFV2_3P1N_2(W(1,61), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,22,2,6/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,7))
      CALL FFV2_3P1N_2(W(1,61), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,24,4,8/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,7))
      CALL FFV2_3P1N_2(W(1,62), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,21,1,5/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,7))
      CALL FFV2_3P1N_2(W(1,62), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/19,23,3,7/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,7))
      CALL FFV2_3P1N_2(W(1,63), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,30,10,14/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,7))
      CALL FFV2_3P1N_2(W(1,63), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,32,12,16/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,7))
      CALL FFV2_3P1N_2(W(1,64), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,29,9,13/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,7))
      CALL FFV2_3P1N_2(W(1,64), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/27,31,11,15/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,7))  !  count 1
      CALL FFV2_3_1(W(1,57),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,73))  !  count 8
      CALL FFV2_3_1(W(1,57),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,74))  !  count 8
      CALL FFV2_3_1(W(1,58),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,75))  !  count 8
      CALL FFV2_3_1(W(1,58),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,76))  !  count 8
      CALL FFV2_3_1(W(1,59),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,77))  !  count 8
      CALL FFV2_3_1(W(1,59),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,78))  !  count 8
      CALL FFV2_3_1(W(1,60),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,79))  !  count 8
      CALL FFV2_3_1(W(1,60),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,80))  !  count 8
      CALL FFV2_3P1N_2(W(1,61), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,20,2,4/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,8))
      CALL FFV2_3P1N_2(W(1,61), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,24,6,8/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,8))
      CALL FFV2_3P1N_2(W(1,62), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,19,1,3/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,8))
      CALL FFV2_3P1N_2(W(1,62), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/21,23,5,7/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,8))
      CALL FFV2_3P1N_2(W(1,63), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,28,10,12/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,8))
      CALL FFV2_3P1N_2(W(1,63), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,32,14,16/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,8))
      CALL FFV2_3P1N_2(W(1,64), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,27,9,11/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,8))
      CALL FFV2_3P1N_2(W(1,64), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/29,31,13,15/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,8))  !  count 1
      CALL FFV1_1(W(1,57),W(1,17),GC_11,ZERO,FK_ZERO,W(1,81))  !  count 8
      CALL FFV1_1(W(1,57),W(1,18),GC_11,ZERO,FK_ZERO,W(1,82))  !  count 8
      CALL FFV1_1(W(1,58),W(1,17),GC_11,ZERO,FK_ZERO,W(1,83))  !  count 8
      CALL FFV1_1(W(1,58),W(1,18),GC_11,ZERO,FK_ZERO,W(1,84))  !  count 8
      CALL FFV1_1(W(1,59),W(1,17),GC_11,ZERO,FK_ZERO,W(1,85))  !  count 8
      CALL FFV1_1(W(1,59),W(1,18),GC_11,ZERO,FK_ZERO,W(1,86))  !  count 8
      CALL FFV1_1(W(1,60),W(1,17),GC_11,ZERO,FK_ZERO,W(1,87))  !  count 8
      CALL FFV1_1(W(1,60),W(1,18),GC_11,ZERO,FK_ZERO,W(1,88))  !  count 8
      CALL FFV2_3P1N_2(W(1,41), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,9))
      CALL FFV2_3P1N_2(W(1,41), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,9))
      CALL FFV2_3P1N_2(W(1,42), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,9))
      CALL FFV2_3P1N_2(W(1,42), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,9))
      CALL FFV2_3P1N_2(W(1,43), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,9))
      CALL FFV2_3P1N_2(W(1,43), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,9))
      CALL FFV2_3P1N_2(W(1,44), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,9))
      CALL FFV2_3P1N_2(W(1,44), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,9))  !  count 1
      CALL FFV1P1N_2(W(1,41), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,20,2,4/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,10))
      CALL FFV1P1N_2(W(1,41), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,19,1,3/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,10))
      CALL FFV1P1N_2(W(1,42), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/22,24,6,8/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,10))
      CALL FFV1P1N_2(W(1,42), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/21,23,5,7/), 
     & (/73,74,75,76/),
     & TMP, W, AMP(1,10))
      CALL FFV1P1N_2(W(1,43), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,28,10,12/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,10))
      CALL FFV1P1N_2(W(1,43), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,27,9,11/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,10))
      CALL FFV1P1N_2(W(1,44), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/30,32,14,16/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,10))
      CALL FFV1P1N_2(W(1,44), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/29,31,13,15/), 
     & (/77,78,79,80/),
     & TMP, W, AMP(1,10))  !  count 1
      CALL FFV2_3P1N_2(W(1,37), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,11))
      CALL FFV2_3P1N_2(W(1,37), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,11))
      CALL FFV2_3P1N_2(W(1,38), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,11))
      CALL FFV2_3P1N_2(W(1,38), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/81,82,83,84/),
     & TMP, W, AMP(1,11))
      CALL FFV2_3P1N_2(W(1,39), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,11))
      CALL FFV2_3P1N_2(W(1,39), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,11))
      CALL FFV2_3P1N_2(W(1,40), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,11))
      CALL FFV2_3P1N_2(W(1,40), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/85,86,87,88/),
     & TMP, W, AMP(1,11))  !  count 1
      CALL FFV1P1N_2(W(1,37), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,22,2,6/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,12))
      CALL FFV1P1N_2(W(1,37), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,21,1,5/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,12))
      CALL FFV1P1N_2(W(1,38), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/20,24,4,8/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,12))
      CALL FFV1P1N_2(W(1,38), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/19,23,3,7/), 
     & (/65,66,67,68/),
     & TMP, W, AMP(1,12))
      CALL FFV1P1N_2(W(1,39), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,30,10,14/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,12))
      CALL FFV1P1N_2(W(1,39), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,29,9,13/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,12))
      CALL FFV1P1N_2(W(1,40), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/28,32,12,16/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,12))
      CALL FFV1P1N_2(W(1,40), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/27,31,11,15/), 
     & (/69,70,71,72/),
     & TMP, W, AMP(1,12))  !  count 1
      CALL FFV1_2(W(1,3),W(1,1),GC_11,ZERO,FK_ZERO,W(1,89))  !  count 6
      CALL FFV1_2(W(1,3),W(1,2),GC_11,ZERO,FK_ZERO,W(1,90))  !  count 6
      CALL FFV1_2(W(1,4),W(1,1),GC_11,ZERO,FK_ZERO,W(1,91))  !  count 6
      CALL FFV1_2(W(1,4),W(1,2),GC_11,ZERO,FK_ZERO,W(1,92))  !  count 6
      CALL FFV1_1(W(1,19),W(1,17),GC_11,ZERO,FK_ZERO,W(1,93))  !  count 34
      CALL FFV1_1(W(1,19),W(1,18),GC_11,ZERO,FK_ZERO,W(1,94))  !  count 34
      CALL FFV1_1(W(1,20),W(1,17),GC_11,ZERO,FK_ZERO,W(1,95))  !  count 34
      CALL FFV1_1(W(1,20),W(1,18),GC_11,ZERO,FK_ZERO,W(1,96))  !  count 34
      CALL FFV2_3_2(W(1,89),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,97))  !  count 8
      CALL FFV2_3_2(W(1,89),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,98))  !  count 8
      CALL FFV2_3_2(W(1,90),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,99))  !  count 8
      CALL FFV2_3_2(W(1,90),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,100))  !  count 8
      CALL FFV2_3_2(W(1,91),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,101))  !  count 8
      CALL FFV2_3_2(W(1,91),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,102))  !  count 8
      CALL FFV2_3_2(W(1,92),W(1,9),GC_50,GC_58,ZERO,FK_ZERO,W(1,103))  !  count 8
      CALL FFV2_3_2(W(1,92),W(1,10),GC_50,GC_58,ZERO,FK_ZERO,W(1,104))  !  count 8
      CALL FFV2_3P1N_1(W(1,93), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,22,2,6/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,13))
      CALL FFV2_3P1N_1(W(1,93), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,24,4,8/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,13))
      CALL FFV2_3P1N_1(W(1,94), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,21,1,5/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,13))
      CALL FFV2_3P1N_1(W(1,94), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/19,23,3,7/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,13))
      CALL FFV2_3P1N_1(W(1,95), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,30,10,14/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,13))
      CALL FFV2_3P1N_1(W(1,95), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,32,12,16/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,13))
      CALL FFV2_3P1N_1(W(1,96), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,29,9,13/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,13))
      CALL FFV2_3P1N_1(W(1,96), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/27,31,11,15/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,13))  !  count 1
      CALL FFV2_3_2(W(1,89),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,105))  !  count 8
      CALL FFV2_3_2(W(1,89),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,106))  !  count 8
      CALL FFV2_3_2(W(1,90),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,107))  !  count 8
      CALL FFV2_3_2(W(1,90),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,108))  !  count 8
      CALL FFV2_3_2(W(1,91),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,109))  !  count 8
      CALL FFV2_3_2(W(1,91),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,110))  !  count 8
      CALL FFV2_3_2(W(1,92),W(1,15),GC_50,GC_58,ZERO,FK_ZERO,W(1,111))  !  count 8
      CALL FFV2_3_2(W(1,92),W(1,16),GC_50,GC_58,ZERO,FK_ZERO,W(1,112))  !  count 8
      CALL FFV2_3P1N_1(W(1,93), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,20,2,4/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,14))
      CALL FFV2_3P1N_1(W(1,93), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,24,6,8/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,14))
      CALL FFV2_3P1N_1(W(1,94), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,19,1,3/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,14))
      CALL FFV2_3P1N_1(W(1,94), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/21,23,5,7/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,14))
      CALL FFV2_3P1N_1(W(1,95), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,28,10,12/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,14))
      CALL FFV2_3P1N_1(W(1,95), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,32,14,16/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,14))
      CALL FFV2_3P1N_1(W(1,96), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,27,9,11/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,14))
      CALL FFV2_3P1N_1(W(1,96), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/29,31,13,15/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,14))  !  count 1
      CALL FFV1_2(W(1,89),W(1,17),GC_11,ZERO,FK_ZERO,W(1,113))  !  count 8
      CALL FFV1_2(W(1,89),W(1,18),GC_11,ZERO,FK_ZERO,W(1,114))  !  count 8
      CALL FFV1_2(W(1,90),W(1,17),GC_11,ZERO,FK_ZERO,W(1,115))  !  count 8
      CALL FFV1_2(W(1,90),W(1,18),GC_11,ZERO,FK_ZERO,W(1,116))  !  count 8
      CALL FFV1_2(W(1,91),W(1,17),GC_11,ZERO,FK_ZERO,W(1,117))  !  count 8
      CALL FFV1_2(W(1,91),W(1,18),GC_11,ZERO,FK_ZERO,W(1,118))  !  count 8
      CALL FFV1_2(W(1,92),W(1,17),GC_11,ZERO,FK_ZERO,W(1,119))  !  count 8
      CALL FFV1_2(W(1,92),W(1,18),GC_11,ZERO,FK_ZERO,W(1,120))  !  count 8
      CALL FFV2_3P1N_1(W(1,25), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,15))
      CALL FFV2_3P1N_1(W(1,25), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,15))
      CALL FFV2_3P1N_1(W(1,26), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,15))
      CALL FFV2_3P1N_1(W(1,26), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,15))
      CALL FFV2_3P1N_1(W(1,27), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,15))
      CALL FFV2_3P1N_1(W(1,27), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,15))
      CALL FFV2_3P1N_1(W(1,28), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,15))
      CALL FFV2_3P1N_1(W(1,28), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,15))  !  count 1
      CALL FFV1P1N_1(W(1,25), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,20,2,4/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,16))
      CALL FFV1P1N_1(W(1,25), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,19,1,3/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,16))
      CALL FFV1P1N_1(W(1,26), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/22,24,6,8/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,16))
      CALL FFV1P1N_1(W(1,26), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/21,23,5,7/), 
     & (/105,106,107,108/),
     & TMP, W, AMP(1,16))
      CALL FFV1P1N_1(W(1,27), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,28,10,12/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,16))
      CALL FFV1P1N_1(W(1,27), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,27,9,11/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,16))
      CALL FFV1P1N_1(W(1,28), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/30,32,14,16/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,16))
      CALL FFV1P1N_1(W(1,28), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/29,31,13,15/), 
     & (/109,110,111,112/),
     & TMP, W, AMP(1,16))  !  count 1
      CALL FFV2_3P1N_1(W(1,53), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,17,2,1/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,17))
      CALL FFV2_3P1N_1(W(1,53), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,21,6,5/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,17))
      CALL FFV2_3P1N_1(W(1,54), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,19,4,3/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,17))
      CALL FFV2_3P1N_1(W(1,54), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,23,8,7/), 
     & (/113,114,115,116/),
     & TMP, W, AMP(1,17))
      CALL FFV2_3P1N_1(W(1,55), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,25,10,9/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,17))
      CALL FFV2_3P1N_1(W(1,55), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,29,14,13/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,17))
      CALL FFV2_3P1N_1(W(1,56), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,27,12,11/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,17))
      CALL FFV2_3P1N_1(W(1,56), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,31,16,15/), 
     & (/117,118,119,120/),
     & TMP, W, AMP(1,17))  !  count 1
      CALL FFV1P1N_1(W(1,53), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,22,2,6/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,18))
      CALL FFV1P1N_1(W(1,53), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,21,1,5/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,18))
      CALL FFV1P1N_1(W(1,54), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/20,24,4,8/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,18))
      CALL FFV1P1N_1(W(1,54), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/19,23,3,7/), 
     & (/97,98,99,100/),
     & TMP, W, AMP(1,18))
      CALL FFV1P1N_1(W(1,55), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,30,10,14/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,18))
      CALL FFV1P1N_1(W(1,55), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,29,9,13/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,18))
      CALL FFV1P1N_1(W(1,56), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/28,32,12,16/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,18))
      CALL FFV1P1N_1(W(1,56), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/27,31,11,15/), 
     & (/101,102,103,104/),
     & TMP, W, AMP(1,18))  !  count 1
      CALL FFV1_1(W(1,93),W(1,1),GC_11,ZERO,FK_ZERO,W(1,121))  !  count 8
      CALL FFV1_1(W(1,93),W(1,2),GC_11,ZERO,FK_ZERO,W(1,122))  !  count 8
      CALL FFV1_1(W(1,94),W(1,1),GC_11,ZERO,FK_ZERO,W(1,123))  !  count 8
      CALL FFV1_1(W(1,94),W(1,2),GC_11,ZERO,FK_ZERO,W(1,124))  !  count 8
      CALL FFV1_1(W(1,95),W(1,1),GC_11,ZERO,FK_ZERO,W(1,125))  !  count 8
      CALL FFV1_1(W(1,95),W(1,2),GC_11,ZERO,FK_ZERO,W(1,126))  !  count 8
      CALL FFV1_1(W(1,96),W(1,1),GC_11,ZERO,FK_ZERO,W(1,127))  !  count 8
      CALL FFV1_1(W(1,96),W(1,2),GC_11,ZERO,FK_ZERO,W(1,128))  !  count 8
      CALL FFV2_3P1N_2(W(1,41), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,17,1/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,19))
      CALL FFV2_3P1N_2(W(1,41), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,4,19,3/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,19))
      CALL FFV2_3P1N_2(W(1,42), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,6,21,5/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,19))
      CALL FFV2_3P1N_2(W(1,42), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,8,23,7/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,19))
      CALL FFV2_3P1N_2(W(1,43), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,25,9/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,19))
      CALL FFV2_3P1N_2(W(1,43), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,12,27,11/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,19))
      CALL FFV2_3P1N_2(W(1,44), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,14,29,13/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,19))
      CALL FFV2_3P1N_2(W(1,44), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,16,31,15/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,19))  !  count 1
      CALL FFV1_2(W(1,41),W(1,1),GC_11,ZERO,FK_ZERO,W(1,129))  !  count 8
      CALL FFV1_2(W(1,41),W(1,2),GC_11,ZERO,FK_ZERO,W(1,130))  !  count 8
      CALL FFV1_2(W(1,42),W(1,1),GC_11,ZERO,FK_ZERO,W(1,131))  !  count 8
      CALL FFV1_2(W(1,42),W(1,2),GC_11,ZERO,FK_ZERO,W(1,132))  !  count 8
      CALL FFV1_2(W(1,43),W(1,1),GC_11,ZERO,FK_ZERO,W(1,133))  !  count 8
      CALL FFV1_2(W(1,43),W(1,2),GC_11,ZERO,FK_ZERO,W(1,134))  !  count 8
      CALL FFV1_2(W(1,44),W(1,1),GC_11,ZERO,FK_ZERO,W(1,135))  !  count 8
      CALL FFV1_2(W(1,44),W(1,2),GC_11,ZERO,FK_ZERO,W(1,136))  !  count 8
      CALL FFV2_3P1N_1(W(1,93), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,22,6/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,20))
      CALL FFV2_3P1N_1(W(1,93), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,4,24,8/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,20))
      CALL FFV2_3P1N_1(W(1,94), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,1,21,5/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,20))
      CALL FFV2_3P1N_1(W(1,94), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/19,3,23,7/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,20))
      CALL FFV2_3P1N_1(W(1,95), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,30,14/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,20))
      CALL FFV2_3P1N_1(W(1,95), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,12,32,16/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,20))
      CALL FFV2_3P1N_1(W(1,96), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,9,29,13/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,20))
      CALL FFV2_3P1N_1(W(1,96), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/27,11,31,15/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,20))  !  count 1
      CALL FFV2_3P1N_2(W(1,37), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,17,1/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,21))
      CALL FFV2_3P1N_2(W(1,37), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,6,21,5/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,21))
      CALL FFV2_3P1N_2(W(1,38), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,4,19,3/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,21))
      CALL FFV2_3P1N_2(W(1,38), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,8,23,7/), 
     & (/121,122,123,124/),
     & TMP, W, AMP(1,21))
      CALL FFV2_3P1N_2(W(1,39), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,25,9/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,21))
      CALL FFV2_3P1N_2(W(1,39), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,14,29,13/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,21))
      CALL FFV2_3P1N_2(W(1,40), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,12,27,11/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,21))
      CALL FFV2_3P1N_2(W(1,40), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,16,31,15/), 
     & (/125,126,127,128/),
     & TMP, W, AMP(1,21))  !  count 1
      CALL FFV1_2(W(1,37),W(1,1),GC_11,ZERO,FK_ZERO,W(1,137))  !  count 8
      CALL FFV1_2(W(1,37),W(1,2),GC_11,ZERO,FK_ZERO,W(1,138))  !  count 8
      CALL FFV1_2(W(1,38),W(1,1),GC_11,ZERO,FK_ZERO,W(1,139))  !  count 8
      CALL FFV1_2(W(1,38),W(1,2),GC_11,ZERO,FK_ZERO,W(1,140))  !  count 8
      CALL FFV1_2(W(1,39),W(1,1),GC_11,ZERO,FK_ZERO,W(1,141))  !  count 8
      CALL FFV1_2(W(1,39),W(1,2),GC_11,ZERO,FK_ZERO,W(1,142))  !  count 8
      CALL FFV1_2(W(1,40),W(1,1),GC_11,ZERO,FK_ZERO,W(1,143))  !  count 8
      CALL FFV1_2(W(1,40),W(1,2),GC_11,ZERO,FK_ZERO,W(1,144))  !  count 8
      CALL FFV2_3P1N_1(W(1,93), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,20,4/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,22))
      CALL FFV2_3P1N_1(W(1,93), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,6,24,8/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,22))
      CALL FFV2_3P1N_1(W(1,94), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,1,19,3/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,22))
      CALL FFV2_3P1N_1(W(1,94), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/21,5,23,7/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,22))
      CALL FFV2_3P1N_1(W(1,95), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,28,12/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,22))
      CALL FFV2_3P1N_1(W(1,95), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,14,32,16/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,22))
      CALL FFV2_3P1N_1(W(1,96), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,9,27,11/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,22))
      CALL FFV2_3P1N_1(W(1,96), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/29,13,31,15/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,22))  !  count 1
      CALL FFV1_2(W(1,61),W(1,1),GC_11,ZERO,FK_ZERO,W(1,145))  !  count 8
      CALL FFV1_2(W(1,61),W(1,2),GC_11,ZERO,FK_ZERO,W(1,146))  !  count 8
      CALL FFV1_2(W(1,62),W(1,1),GC_11,ZERO,FK_ZERO,W(1,147))  !  count 8
      CALL FFV1_2(W(1,62),W(1,2),GC_11,ZERO,FK_ZERO,W(1,148))  !  count 8
      CALL FFV1_2(W(1,63),W(1,1),GC_11,ZERO,FK_ZERO,W(1,149))  !  count 8
      CALL FFV1_2(W(1,63),W(1,2),GC_11,ZERO,FK_ZERO,W(1,150))  !  count 8
      CALL FFV1_2(W(1,64),W(1,1),GC_11,ZERO,FK_ZERO,W(1,151))  !  count 8
      CALL FFV1_2(W(1,64),W(1,2),GC_11,ZERO,FK_ZERO,W(1,152))  !  count 8
      CALL FFV2_3P1N_1(W(1,25), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,17,1/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,23))
      CALL FFV2_3P1N_1(W(1,25), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,4,19,3/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,23))
      CALL FFV2_3P1N_1(W(1,26), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,6,21,5/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,23))
      CALL FFV2_3P1N_1(W(1,26), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,8,23,7/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,23))
      CALL FFV2_3P1N_1(W(1,27), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,25,9/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,23))
      CALL FFV2_3P1N_1(W(1,27), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,12,27,11/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,23))
      CALL FFV2_3P1N_1(W(1,28), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,14,29,13/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,23))
      CALL FFV2_3P1N_1(W(1,28), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,16,31,15/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,23))  !  count 1
      CALL FFV1_1(W(1,25),W(1,1),GC_11,ZERO,FK_ZERO,W(1,153))  !  count 8
      CALL FFV1_1(W(1,25),W(1,2),GC_11,ZERO,FK_ZERO,W(1,154))  !  count 8
      CALL FFV1_1(W(1,26),W(1,1),GC_11,ZERO,FK_ZERO,W(1,155))  !  count 8
      CALL FFV1_1(W(1,26),W(1,2),GC_11,ZERO,FK_ZERO,W(1,156))  !  count 8
      CALL FFV1_1(W(1,27),W(1,1),GC_11,ZERO,FK_ZERO,W(1,157))  !  count 8
      CALL FFV1_1(W(1,27),W(1,2),GC_11,ZERO,FK_ZERO,W(1,158))  !  count 8
      CALL FFV1_1(W(1,28),W(1,1),GC_11,ZERO,FK_ZERO,W(1,159))  !  count 8
      CALL FFV1_1(W(1,28),W(1,2),GC_11,ZERO,FK_ZERO,W(1,160))  !  count 8
      CALL FFV2_3P1N_2(W(1,61), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,22,6/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,24))
      CALL FFV2_3P1N_2(W(1,61), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,4,24,8/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,24))
      CALL FFV2_3P1N_2(W(1,62), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,1,21,5/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,24))
      CALL FFV2_3P1N_2(W(1,62), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/19,3,23,7/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,24))
      CALL FFV2_3P1N_2(W(1,63), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,30,14/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,24))
      CALL FFV2_3P1N_2(W(1,63), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,12,32,16/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,24))
      CALL FFV2_3P1N_2(W(1,64), W(1,15), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,9,29,13/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,24))
      CALL FFV2_3P1N_2(W(1,64), W(1,16), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/27,11,31,15/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,24))  !  count 1
      CALL FFV2_3P1N_1(W(1,53), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,17,1/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,25))
      CALL FFV2_3P1N_1(W(1,53), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,6,21,5/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,25))
      CALL FFV2_3P1N_1(W(1,54), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/20,4,19,3/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,25))
      CALL FFV2_3P1N_1(W(1,54), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/24,8,23,7/), 
     & (/145,146,147,148/),
     & TMP, W, AMP(1,25))
      CALL FFV2_3P1N_1(W(1,55), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,25,9/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,25))
      CALL FFV2_3P1N_1(W(1,55), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,14,29,13/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,25))
      CALL FFV2_3P1N_1(W(1,56), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/28,12,27,11/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,25))
      CALL FFV2_3P1N_1(W(1,56), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/32,16,31,15/), 
     & (/149,150,151,152/),
     & TMP, W, AMP(1,25))  !  count 1
      CALL FFV1_1(W(1,53),W(1,1),GC_11,ZERO,FK_ZERO,W(1,161))  !  count 8
      CALL FFV1_1(W(1,53),W(1,2),GC_11,ZERO,FK_ZERO,W(1,162))  !  count 8
      CALL FFV1_1(W(1,54),W(1,1),GC_11,ZERO,FK_ZERO,W(1,163))  !  count 8
      CALL FFV1_1(W(1,54),W(1,2),GC_11,ZERO,FK_ZERO,W(1,164))  !  count 8
      CALL FFV1_1(W(1,55),W(1,1),GC_11,ZERO,FK_ZERO,W(1,165))  !  count 8
      CALL FFV1_1(W(1,55),W(1,2),GC_11,ZERO,FK_ZERO,W(1,166))  !  count 8
      CALL FFV1_1(W(1,56),W(1,1),GC_11,ZERO,FK_ZERO,W(1,167))  !  count 8
      CALL FFV1_1(W(1,56),W(1,2),GC_11,ZERO,FK_ZERO,W(1,168))  !  count 8
      CALL FFV2_3P1N_2(W(1,61), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/18,2,20,4/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,26))
      CALL FFV2_3P1N_2(W(1,61), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/22,6,24,8/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,26))
      CALL FFV2_3P1N_2(W(1,62), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/17,1,19,3/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,26))
      CALL FFV2_3P1N_2(W(1,62), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/21,5,23,7/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,26))
      CALL FFV2_3P1N_2(W(1,63), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/26,10,28,12/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,26))
      CALL FFV2_3P1N_2(W(1,63), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/30,14,32,16/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,26))
      CALL FFV2_3P1N_2(W(1,64), W(1,9), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/25,9,27,11/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,26))
      CALL FFV2_3P1N_2(W(1,64), W(1,10), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/29,13,31,15/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,26))  !  count 1
      CALL FFV1P1N_2(W(1,37), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,2,22,6/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,27))
      CALL FFV1P1N_2(W(1,37), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,1,21,5/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,27))
      CALL FFV1P1N_2(W(1,38), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/20,4,24,8/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,27))
      CALL FFV1P1N_2(W(1,38), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/19,3,23,7/), 
     & (/153,154,155,156/),
     & TMP, W, AMP(1,27))
      CALL FFV1P1N_2(W(1,39), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,10,30,14/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,27))
      CALL FFV1P1N_2(W(1,39), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,9,29,13/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,27))
      CALL FFV1P1N_2(W(1,40), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/28,12,32,16/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,27))
      CALL FFV1P1N_2(W(1,40), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/27,11,31,15/), 
     & (/157,158,159,160/),
     & TMP, W, AMP(1,27))  !  count 1
      CALL FFV1P1N_1(W(1,25), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,2,20,4/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,28))
      CALL FFV1P1N_1(W(1,25), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,1,19,3/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,28))
      CALL FFV1P1N_1(W(1,26), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/22,6,24,8/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,28))
      CALL FFV1P1N_1(W(1,26), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/21,5,23,7/), 
     & (/137,138,139,140/),
     & TMP, W, AMP(1,28))
      CALL FFV1P1N_1(W(1,27), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,10,28,12/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,28))
      CALL FFV1P1N_1(W(1,27), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,9,27,11/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,28))
      CALL FFV1P1N_1(W(1,28), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/30,14,32,16/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,28))
      CALL FFV1P1N_1(W(1,28), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/29,13,31,15/), 
     & (/141,142,143,144/),
     & TMP, W, AMP(1,28))  !  count 1
      CALL FFV1P1N_1(W(1,53), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,2,22,6/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,29))
      CALL FFV1P1N_1(W(1,53), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,1,21,5/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,29))
      CALL FFV1P1N_1(W(1,54), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/20,4,24,8/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,29))
      CALL FFV1P1N_1(W(1,54), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/19,3,23,7/), 
     & (/129,130,131,132/),
     & TMP, W, AMP(1,29))
      CALL FFV1P1N_1(W(1,55), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,10,30,14/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,29))
      CALL FFV1P1N_1(W(1,55), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,9,29,13/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,29))
      CALL FFV1P1N_1(W(1,56), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/28,12,32,16/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,29))
      CALL FFV1P1N_1(W(1,56), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/27,11,31,15/), 
     & (/133,134,135,136/),
     & TMP, W, AMP(1,29))  !  count 1
      CALL FFV1P1N_2(W(1,41), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/18,2,20,4/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,30))
      CALL FFV1P1N_2(W(1,41), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/17,1,19,3/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,30))
      CALL FFV1P1N_2(W(1,42), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/22,6,24,8/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,30))
      CALL FFV1P1N_2(W(1,42), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/21,5,23,7/), 
     & (/161,162,163,164/),
     & TMP, W, AMP(1,30))
      CALL FFV1P1N_2(W(1,43), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/26,10,28,12/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,30))
      CALL FFV1P1N_2(W(1,43), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/25,9,27,11/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,30))
      CALL FFV1P1N_2(W(1,44), W(1,17), GC_11, TMP(1))
      call CombineAmp(4,
     & (/30,14,32,16/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,30))
      CALL FFV1P1N_2(W(1,44), W(1,18), GC_11, TMP(1))
      call CombineAmp(4,
     & (/29,13,31,15/), 
     & (/165,166,167,168/),
     & TMP, W, AMP(1,30))  !  count 1

      JAMP(:,:)  = (0d0,0d0)
      DO K = 1, NCOMB
        
        JAMP(:,:) = (0D0,0D0)
C       JAMPs contributing to orders ALL_ORDERS=1
        TMP_JAMP(3) = AMP( K,5) +  AMP( K,6)   !  used 2 times
        TMP_JAMP(2) = AMP( K,3) +  AMP( K,4)   !  used 2 times
        TMP_JAMP(1) = AMP( K,1) +  AMP( K,2)   !  used 2 times
        TMP_JAMP(4) = TMP_JAMP(2) +  TMP_JAMP(1)   !  used 2 times
        TMP_JAMP(5) = TMP_JAMP(4) +  TMP_JAMP(3)   !  used 2 times
        JAMP(1,1) = AMP( K,7)+AMP( K,8)+AMP( K,9)+AMP( K,10)+AMP( K,11)+
     $  AMP( K,12)+AMP( K,23) +AMP( K,24)+AMP( K,25)+AMP( K,26)+AMP( K,27)+AMP( 
     $  K,30)+((0.000000000000000D +00,-1.000000000000000D+00))*TMP_JAMP(5)
        JAMP(2,1) = AMP( K,13)+AMP( K,14)+AMP( K,15)+AMP( K,16)+AMP( K,1
     $  7)+AMP( K,18) +AMP( K,19)+AMP( K,20)+AMP( K,21)+AMP( K,22)+AMP( K,28)+AM
     $  P( K,29) +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(5)

        TS(K) = 0.D0 
        DO M = 1, NAMPSO
          DO I = 1, NCOLOR
            ZTEMP = (0.D0,0.D0)
            DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
            ENDDO
            DO N = 1, NAMPSO

              TS(K) = TS(K) + ZTEMP*DCONJG(JAMP(I,N))

            ENDDO
          ENDDO
        ENDDO
        if(sde_strat.eq.1) then
        
        IF(SDE_STRAT.EQ.1)THEN
          AMP2(1)=AMP2(1)+AMP( K,1)*DCONJG(AMP( K,1))
          AMP2(2)=AMP2(2)+AMP( K,2)*DCONJG(AMP( K,2))
          AMP2(3)=AMP2(3)+AMP( K,3)*DCONJG(AMP( K,3))
          AMP2(4)=AMP2(4)+AMP( K,4)*DCONJG(AMP( K,4))
          AMP2(5)=AMP2(5)+AMP( K,5)*DCONJG(AMP( K,5))
          AMP2(6)=AMP2(6)+AMP( K,6)*DCONJG(AMP( K,6))
          AMP2(7)=AMP2(7)+AMP( K,7)*DCONJG(AMP( K,7))
          AMP2(8)=AMP2(8)+AMP( K,8)*DCONJG(AMP( K,8))
          AMP2(9)=AMP2(9)+AMP( K,9)*DCONJG(AMP( K,9))
          AMP2(10)=AMP2(10)+AMP( K,10)*DCONJG(AMP( K,10))
          AMP2(11)=AMP2(11)+AMP( K,11)*DCONJG(AMP( K,11))
          AMP2(12)=AMP2(12)+AMP( K,12)*DCONJG(AMP( K,12))
          AMP2(13)=AMP2(13)+AMP( K,13)*DCONJG(AMP( K,13))
          AMP2(14)=AMP2(14)+AMP( K,14)*DCONJG(AMP( K,14))
          AMP2(15)=AMP2(15)+AMP( K,15)*DCONJG(AMP( K,15))
          AMP2(16)=AMP2(16)+AMP( K,16)*DCONJG(AMP( K,16))
          AMP2(17)=AMP2(17)+AMP( K,17)*DCONJG(AMP( K,17))
          AMP2(18)=AMP2(18)+AMP( K,18)*DCONJG(AMP( K,18))
          AMP2(19)=AMP2(19)+AMP( K,19)*DCONJG(AMP( K,19))
          AMP2(20)=AMP2(20)+AMP( K,20)*DCONJG(AMP( K,20))
          AMP2(21)=AMP2(21)+AMP( K,21)*DCONJG(AMP( K,21))
          AMP2(22)=AMP2(22)+AMP( K,22)*DCONJG(AMP( K,22))
          AMP2(23)=AMP2(23)+AMP( K,23)*DCONJG(AMP( K,23))
          AMP2(24)=AMP2(24)+AMP( K,24)*DCONJG(AMP( K,24))
          AMP2(25)=AMP2(25)+AMP( K,25)*DCONJG(AMP( K,25))
          AMP2(26)=AMP2(26)+AMP( K,26)*DCONJG(AMP( K,26))
          AMP2(27)=AMP2(27)+AMP( K,27)*DCONJG(AMP( K,27))
          AMP2(28)=AMP2(28)+AMP( K,28)*DCONJG(AMP( K,28))
          AMP2(29)=AMP2(29)+AMP( K,29)*DCONJG(AMP( K,29))
          AMP2(30)=AMP2(30)+AMP( K,30)*DCONJG(AMP( K,30))
        ENDIF

        endif
        Do I = 1, NCOLOR
          DO M = 1, NAMPSO
            DO N = 1, NAMPSO

              Jamp2(i)=Jamp2(i)+DABS(DBLE(Jamp(i,m)*dconjg(Jamp(i,n))))

            enddo
          enddo
        Enddo
      ENDDO

      END


      SUBROUTINE PRINT_ZERO_AMP_4()

      integer i
      i =1
      return
      end
C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX4(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,i),i=  1,  1) /    1/
      COMMON/AMPSPLITORDERS4/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS4
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX4=SOINDEX_FOR_SQUARED_ORDERS4(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS4(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,i),i=  1,  1) /    2/
      COMMON/SQPLITORDERS4/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS4 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function' 
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS4'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN4(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX4(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS4/SQPLITORDERS	  
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX4'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX4(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS4/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX4'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS4(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS4/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS4 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS4'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

